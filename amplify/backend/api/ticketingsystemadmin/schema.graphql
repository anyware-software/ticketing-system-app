type Account
  @model
  @auth(
    rules: [
      # allow admin to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read accounts
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read accounts
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  logo: Attachment @hasOne
  domain: String!
  siteTitle: String!
  guestsCount: Int
  tagline: String!
  description: String!
  siteAddress: String!
  defaultLanguage: String!
  languages: [String]!
  features: [String]!
  status: String!
  socialLinks: [String]
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Concept
  @model
  @auth(
    rules: [
      # allow admin to create, update, and delete Concept
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read Concept
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read Concept
      {
        allow: public
        operations: [create, update, delete, read]
        provider: iam
      }
    ]
  ) {
  id: ID!
  accountID: String!
  name: String!
  description: String
  logo: String
  type: String
  location: String
  precedence: Int
  longitude: String
  latitude: String

  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Language
  @model
  @auth(
    rules: [
      # allow admin to create, update, and delete Language
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read Language
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read Language
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  code: String!
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Feature
  @model
  @auth(
    rules: [
      # allow admin to create, update, and delete Feature
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read Feature
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read Feature
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  icon: String
  slug: String!
  precedence: String!
  parent: String
  private: Boolean
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type AdminRole
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete AdminRole
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read AdminRole
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read AdminRole
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String
  description: String
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type AdminGroup
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete AdminGroup
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read AdminGroup
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read AdminGroup
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String
  description: String
  roles: [ID]
  users: [ID]
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Attachment
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  mediaID: ID!
  fileUrl: String!
  filename: String!
  filetype: String
  fileSize: Int
  alternativeText: String
  caption: String
  description: String
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type UserConcepts
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  defaultConcept: ID
  concepts: [ID]
  conceptsRoles: [String]
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Guest
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete guest
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read guest
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read guest
      { allow: public, operations: [create, update, delete, read] }
      {
        allow: public
        provider: iam
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  name: String
  username: String
  email: String
    @index(name: "usersByEmail", queryField: "ByEmail", sortKeyFields: ["name"])
  phone_number: String
    @index(
      name: "usersByPhoneNumber"
      queryField: "ByPhoneNumber"
      sortKeyFields: ["name"]
    )
  guestGroupID: ID
  guestGroupName: String
  guest_avatar: String
  avg_spend: Int
  avg_ticket_type: String
  numberOfTickets: Int
  connections: AWSJSON
  last_attended_event: String
  gender: String
  group: String
  faceBookID: ID
  appPassword: String
  birthdate: String
  isVerified: Boolean
  images: [String]
  address: String
  totalEvents: Int
  flags: [ID]
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type GuestGroup
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete AdminGroup
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read AdminGroup
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read AdminGroup
      { allow: public, operations: [create, update, delete, read] }
      {
        allow: public
        provider: iam
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  name: String
  description: String
  color: String
  guests: [ID]
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Timeline
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read, create], provider: iam }
      { allow: public, operations: [read, create] }
    ]
  ) {
  id: ID!
  actionName: String!
  oldStatus: String!
  newStatus: String!
  bookingId: String
  customerId: String
    @index(
      name: "timelineByCustomerID"
      queryField: "timelineByCustomerID"
      sortKeyFields: ["createdAt"]
    )
  type: String
  description: String
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Flag
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  accountID: String!
  name: String!
  icon: String!
  color: String
  customers: [String]
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Comment
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  message: String!
  customerId: String
  bookingId: String
  replyTo: ID
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByImg: String
  createdByName: String!
}

type Event
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID!
  name: String
  description: String
  startDate: String
  endDate: String
  location: Location
  todoList: [String]
  eventComments: [EventComments]
  map: String
  image: String
  gallery: [String]
  visibleTo: String
  tickets: [EventTicket] @hasMany
  invitationLimit: [InvitationLimit] @hasMany
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
  published: Boolean!
}

type Location {
  address: String
  coordinates: Coordinates
}

type Coordinates {
  lat: Float
  lng: Float
}

type EventComments {
  image: String
  name: String
  message: String
}

type EventTicket
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  type: String!
  cashlessCredit: Float
  description: String
  waves: [Wave]
  color: String
  paymentRules: String
  approvalRule: String
  showAll: Boolean
  showOnHold: Boolean
  onHoldDisplayText: String
  showSoldOut: Boolean
  soldOutDisplayText: String
  setAvailable: Boolean
  availableAtDate: String
  allowTransferred: Boolean
  transferredAprroval: Boolean
  transferredSameGender: Boolean
  eventID: ID! @index(name: "byEventID", queryField: "byEventID")
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type InvitationLimit
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID!
  adminID: String
  quota: Int
  eventID: ID
  deleted: String @default(value: "0")
  createdAt: String
  createdByID: String
  createdByName: String
}

type Wave {
  id: ID!
  name: String!
  price: Float!
  startDate: String
  endDate: String
  active: Boolean
  quota: Int
  AutomaticShift: Boolean
}

type Booking
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID!
  status: String
  overallStatus: String
  guest: Guest @hasOne
  mainGuest: Guest! @hasOne
  event: Event! @hasOne
  eventTicket: EventTicket! @hasOne
  wave: String
  waveId: ID!
  isMainGuest: Boolean
  orderId: String
  statusUpdatedByID: String
  statusUpdatedByName: String
  statusUpdatedAt: String
  specialNeed: Boolean
  phone_number: String
  guestTicket: GuestTicket
  guestName: String
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
  rejectionReason: RejectReason @hasOne
  rejectionComment: String
  isPaid: Boolean
  paidAmount: Float
}

type GuestTicket {
  number: String
}
type RejectReason
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
  updatedAt: String
  updatedByID: String
  updatedByName: String
}

type Invitation
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID!
  event: Event! @hasOne
  eventTicket: EventTicket! @hasOne
  wave: String
  phone_number: String
  email: String
  reason: String
  secret: String
  used: Boolean
  deleted: String @default(value: "0")
  createdAt: String!
  createdByID: String!
  createdByName: String!
}

type Transaction
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID!
  guestId: String
  eventId: String
  ticketId: String
  booking: Booking @hasOne
  issuccess: Boolean
  failureReason: String
  currency: String
  amount_cents: String
  refund: Boolean
  refunded_amount_cents: String
  createdAt: String
  createdByID: String
  createdByName: String
}

type WavesConsumption
  @model
  @auth(
    rules: [
      # allow groups to create, update, and delete users
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read attachments
      { allow: private, operations: [read] }
      # allow all guest users (unauthenticated) to read attachments
      { allow: public, operations: [read] }
    ]
  ) {
  waveId: String
  consumedTickets: Int
  totalTickets: Int
}
